name: Jira Label

on: workflow_call

env:
  jira_pattern: ${{ vars.JIRA_PATTERN }}

jobs:
  label-jiras:
    name: jira label
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Run script
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking push commits for JIRA tickets"
          # GITHUB_REPOSITORY is in the form <owner>/<repo_name>
          REPO=(${GITHUB_REPOSITORY//\// })
          echo "Curling Github via GraphQL API"
          curl -s -X POST -H 'Accept: application/json' -H 'Authorization: token '${GITHUB_TOKEN}'' \
              ${GITHUB_GRAPHQL_URL}  -d '
              {
                  "query": "query { repository(owner: \"'${REPO[0]}'\", name: \"'${REPO[1]}'\"){ object(expression: \"'${GITHUB_SHA}'\") {... on Commit { message associatedPullRequests(last: 1) { edges { node { title commits(first: 100) { edges { node { commit { message }} cursor } pageInfo { endCursor hasNextPage }}}}}}}}}"
              }' > out.json
          #cat out.json
          NEXT=$(< 'out.json' jq '.data.repository.object.associatedPullRequests.edges[].node.commits.pageInfo.hasNextPage')
          CURSOR=$(< 'out.json' jq '.data.repository.object.associatedPullRequests.edges[].node.commits.pageInfo.endCursor')
          temp="${CURSOR%\"}"
          NOQUOTES="${temp#\"}"
          while [ "${NEXT}" = true ];
          do
              curl -s -X POST -H 'Accept: application/json' -H 'Authorization: token '${GITHUB_TOKEN}'' \
              ${GITHUB_GRAPHQL_URL}  -d '
              {
                  "query": "query { repository(owner: \"'${REPO[0]}'\", name: \"'${REPO[1]}'\"){ object(expression: \"'${GITHUB_SHA}'\") {... on Commit { message associatedPullRequests(last: 1) { edges { node { title commits(first: 100 after: \"'${NOQUOTES}'\") { edges { node { commit { message }} cursor } pageInfo { endCursor hasNextPage }}}}}}}}}"
              }' > out_iterate.json
              NEXT=$(< 'out_iterate.json' jq '.data.repository.object.associatedPullRequests.edges[].node.commits.pageInfo.hasNextPage')
              CURSOR=$(< 'out_iterate.json' jq '.data.repository.object.associatedPullRequests.edges[].node.commits.pageInfo.endCursor')
              temp="${CURSOR%\"}"
              NOQUOTES="${temp#\"}"
              cat out_iterate.json >> out.json
          done
          echo "Get all JIRA tickets in PR..."
          grep -Eo "(${jira_pattern})-[0-9]{2,4}" out.json | uniq > tickets.txt
          echo "Tickets being merged:"
          cat tickets.txt
          echo ""
          LABEL_TEXT='MERGED_TO_DEV'
          if [[ ${GITHUB_REF} == 'refs/heads/canary' ]]; then
              LABEL_TEXT='MERGED_TO_CANARY'
          elif [[ ${GITHUB_REF} == 'refs/heads/master' ]] || [[ ${GITHUB_REF} == 'refs/heads/main' ]] || [[ ${GITHUB_REF} == 'refs/heads/release' ]]; then
              LABEL_TEXT='MERGED_TO_PROD'
          fi
          echo "Using label: ${LABEL_TEXT} because of commit to ${GITHUB_REF}"
          while read tic; do
              curl -s -X PUT -u ${JIRA_USER_EMAIL}:${JIRA_API_TOKEN} \
              -H "Content-Type: application/json" \
              ${JIRA_BASE_URL}/rest/api/2/issue/$tic -d '
              {
                  "update" : {
                      "labels": [ {"add": "'${LABEL_TEXT}'"} ]
                  }
              }'
              echo "Updated labels for $tic"
          done < tickets.txt
