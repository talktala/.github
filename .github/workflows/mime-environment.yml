name: Qovery Environment Create/Update

on: workflow_call

jobs:
  mime-environment-create-update:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - id: create-environment
        name: Clone mime base environment
        env:
          QOVERY_CLI_ACCESS_TOKEN: ${{ secrets.QOVERY_CLI_ACCESS_TOKEN }}
        run: |
          curl -s https://get.qovery.com | bash

          echo "Organization name: ${{ vars.QOVERY_ORGANIZATION_NAME }}"
          echo "Project name: ${{ vars.QOVERY_PROJECT_NAME }}"
          echo "Blueprint name: ${{ vars.QOVERY_BLUEPRINT_ENVIRONMENT_NAME }}"

          epic_name="${GITHUB_REF_NAME#mime/}"
          environment_name="${epic_name//[^a-zA-Z0-9\-_]/}"

          q_environs=`qovery environment list \
            --organization "${{ vars.QOVERY_ORGANIZATION_NAME }}" \
            --project "${{ vars.QOVERY_PROJECT_NAME }}" \
            --json`     

          exists=$(echo "$q_environs" | jq ".[] | select(.name == \"$environment_name\")")

          if [[ -n "$exists" ]]; then
            echo "Mime environment exists, updating service for ${GITHUB_REPOSITORY#talktala/}"
            qovery application update \
              --organization "${{ vars.QOVERY_ORGANIZATION_NAME }}" \
              --project "${{ vars.QOVERY_PROJECT_NAME }}" \
              --environment "$environment_name" \
              --application "${GITHUB_REPOSITORY#talktala/}" \
              --branch "${GITHUB_REF_NAME}"

            qovery application deploy \
              --organization "${{ vars.QOVERY_ORGANIZATION_NAME }}" \
              --project "${{ vars.QOVERY_PROJECT_NAME }}" \
              --environment "$environment_name" \
              --application "${GITHUB_REPOSITORY#talktala/}" \
              -w
          else
            echo "Cloning '${{ vars.QOVERY_BLUEPRINT_ENVIRONMENT_NAME }}' environment into '$environment_name' environment"
            qovery environment clone \
              --organization "${{ vars.QOVERY_ORGANIZATION_NAME }}" \
              --project "${{ vars.QOVERY_PROJECT_NAME }}" \
              --environment "${{ vars.QOVERY_BLUEPRINT_ENVIRONMENT_NAME }}" \
              --new-environment-name "$environment_name"

            qovery application update \
              --organization "${{ vars.QOVERY_ORGANIZATION_NAME }}" \
              --project "${{ vars.QOVERY_PROJECT_NAME }}" \
              --environment "$environment_name" \
              --application "${GITHUB_REPOSITORY#talktala/}" \
              --branch "${GITHUB_REF_NAME}"

            echo "Running initial Deployment"
            qovery environment deploy \
              --organization "${{ vars.QOVERY_ORGANIZATION_NAME }}" \
              --project "${{ vars.QOVERY_PROJECT_NAME }}" \
              --environment "$environment_name" \
              -w

            echo "Re-deploying web and backend services with custom domain certificates"
            all_apps=("client-web" "therapist-web" "quickmatch-web" "auth-api" "backoffice-web" "quickmatch-api" "sns-services-api" "talkspace-api")
            qovery application deploy \
              --organization "${{ vars.QOVERY_ORGANIZATION_NAME }}" \
              --project "${{ vars.QOVERY_PROJECT_NAME }}" \
              --environment "$environment_name" \
              --applications "$(IFS=,; echo "${all_apps[*]}")" \
              -w

            qovery_status_markdown_output=`qovery service list \
            --organization "${{ vars.QOVERY_ORGANIZATION_NAME }}" \
            --project "${{ vars.QOVERY_PROJECT_NAME }}" \
            --environment "$environment_name" \
            --jira`

            echo "NEW_ENVIRONMENT=true" >> "$GITHUB_OUTPUT"
            echo "QOVERY_STATUS_MARKDOWN_OUTPUT=${qovery_status_markdown_output}" >> "$GITHUB_OUTPUT"
          fi
      - id: update-jira
        name: Update Jira Ticket with Qovery Environment info
        shell: python
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          NEW_ENVIRONMENT: ${{ steps.create-environment.outputs.QOVERY_STATUS_MARKDOWN_OUTPUT }}
          COMMENT: ${{ steps.create-environment.outputs.QOVERY_STATUS_MARKDOWN_OUTPUT }}
        run: |
          import subprocess
          subprocess.run(["pip", "install", "jira", "markdown"])
          from markdown import markdown
          from jira import JIRA
          import os

          EPIC_NAME = os.getenv('GITHUB_REF_NAME').replace('mime/', '')
          URL = f"{os.getenv('JIRA_BASE_URL')}/rest/api/3/issue/{EPIC_NAME}/comment"
          JIRA_BASE_URL = os.getenv('JIRA_BASE_URL')
          JIRA_USER_EMAIL = os.getenv('JIRA_USER_EMAIL')
          JIRA_API_TOKEN = os.getenv('JIRA_API_TOKEN')
          NEW_ENVIRONMENT = os.getenv('NEW_ENVIRONMENT')
          MARKDOWN = os.getenv('COMMENT')

          options = {
              'server': JIRA_BASE_URL 
          }

          jira = JIRA(options, basic_auth=(JIRA_USER_EMAIL, JIRA_API_TOKEN))

          if NEW_ENVIRONMENT:
            jira.add_comment(EPIC_NAME, MARKDOWN)
            echo "$MARKDOWN" >> "$GITHUB_STEP_SUMMARY"

